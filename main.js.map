{"version":3,"file":"main.js","mappings":"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","sources":["webpack://yandex_praktikum/./src/scripts/components/Card.js","webpack://yandex_praktikum/./src/scripts/components/FormValidator.js","webpack://yandex_praktikum/./src/scripts/components/Section.js","webpack://yandex_praktikum/./src/scripts/components/UserInfo.js","webpack://yandex_praktikum/./src/scripts/components/Popup.js","webpack://yandex_praktikum/./src/scripts/components/PopupWithForm.js","webpack://yandex_praktikum/./src/scripts/components/PopupWithImage.js","webpack://yandex_praktikum/./src/scripts/utils/constants.js","webpack://yandex_praktikum/./src/pages/index.js"],"sourcesContent":["export default class Card {\r\n  constructor({ data, handleCardClick }, cardSelector) {\r\n    this._title = data.name;\r\n    this._image = data.link;\r\n    this._handleCardClick = handleCardClick;\r\n    this._cardSelector = cardSelector;\r\n  }\r\n\r\n  _getTemplate() {\r\n    const newCard = document\r\n      .querySelector(this._cardSelector)\r\n      .content.querySelector('.card')\r\n      .cloneNode(true);\r\n\r\n    return newCard;\r\n  }\r\n\r\n  generateCard() {\r\n    this._element = this._getTemplate();\r\n\r\n    this._cardImage = this._element.querySelector('.card__image');\r\n    this._cardTitle = this._element.querySelector('.card__name');\r\n    this._buttonLike = this._element.querySelector('.card__like-button');\r\n    this._buttonDelete = this._element.querySelector('.card__trach-icon');\r\n\r\n    this._cardImage.src = this._image;\r\n    this._cardImage.alt = this._title;\r\n    this._cardTitle.textContent = this._title;\r\n\r\n    this._setEventListeners();\r\n    return this._element;\r\n  }\r\n\r\n  _handleDeleteCard = () => {\r\n    // удалить карточку\r\n    this._element.remove();\r\n    this._element = null;\r\n  };\r\n\r\n  _handleLikeCard = () => {\r\n    // лайкнуть карточку\r\n    this._buttonLike.classList.toggle('card__like-button_active');\r\n  };\r\n\r\n  _setEventListeners() {\r\n    this._cardImage.addEventListener('click', this._handleCardClick); // открыть фотографию карточки\r\n    this._buttonDelete.addEventListener('click', this._handleDeleteCard); // удалить карточку\r\n    this._buttonLike.addEventListener('click', this._handleLikeCard); // лайкнуть карточку\r\n  }\r\n}\r\n","export default class FormValidator {\r\n  constructor(obj, formElement) {\r\n    this._formSelector = obj.formSelector;\r\n    this._inputSelector = obj.inputSelector;\r\n    this._inputErrorClass = obj.inputErrorClass;\r\n    this._submitButtonSelector = obj.submitButtonSelector;\r\n    this._inactiveButtonClass = obj.inactiveButtonClass;\r\n    this._errorClass = obj.errorClass;\r\n    this._formElement = formElement;\r\n    this._buttonElement = this._formElement.querySelector(\r\n      this._submitButtonSelector\r\n    );\r\n    this._inputList = Array.from(\r\n      this._formElement.querySelectorAll(this._inputSelector)\r\n    );\r\n  }\r\n\r\n  // показать ошибку\r\n  _showInputError = (inputElement) => {\r\n    const errorElement = this._formElement.querySelector(\r\n      `.${inputElement.id}-error`\r\n    );\r\n    inputElement.classList.add(this._inputErrorClass);\r\n    errorElement.classList.add(this._errorClass);\r\n    errorElement.textContent = inputElement.validationMessage;\r\n  };\r\n\r\n  // спрятать ошибку\r\n  _hideInputError = (inputElement) => {\r\n    const errorElement = this._formElement.querySelector(\r\n      `.${inputElement.id}-error`\r\n    );\r\n    inputElement.classList.remove(this._inputErrorClass);\r\n    errorElement.classList.remove(this._errorClass);\r\n    errorElement.textContent = '';\r\n  };\r\n\r\n  // проверить валидность поля ввода\r\n  _hasInvalidInput = () => {\r\n    return this._inputList.some((inputElement) => {\r\n      return !inputElement.validity.valid;\r\n    });\r\n  };\r\n\r\n  // показать|убрать сообщение об ошибки\r\n  _checkInputValidity = (inputElement) => {\r\n    if (!inputElement.validity.valid) {\r\n      // если ошибка\r\n      this._showInputError(inputElement);\r\n    } else {\r\n      // если ошибок нет\r\n      this._hideInputError(inputElement);\r\n    }\r\n  };\r\n\r\n  // установтиь слушателя событий\r\n  _setEventListeners = () => {\r\n    this.toggleButtonState();\r\n\r\n    this._formElement.addEventListener('submit', (evt) => {\r\n      // ! Эта строчка отменяет стандартную отправку формы.\r\n      evt.preventDefault();\r\n    });\r\n\r\n    this._inputList.forEach((inputElement) => {\r\n      inputElement.addEventListener('input', () => {\r\n        this._checkInputValidity(inputElement);\r\n        this.toggleButtonState();\r\n      });\r\n    });\r\n  };\r\n\r\n  // включить|отключить кнопку\r\n  toggleButtonState = () => {\r\n    if (this._hasInvalidInput()) {\r\n      this._buttonElement.disabled = true;\r\n      this._buttonElement.classList.add(this._inactiveButtonClass);\r\n    } else {\r\n      this._buttonElement.disabled = false;\r\n      this._buttonElement.classList.remove(this._inactiveButtonClass);\r\n    }\r\n  };\r\n\r\n  // включить валидацию форм\r\n  enableValidation = () => {\r\n    this._setEventListeners();\r\n  };\r\n\r\n  // обнулить ошибки\r\n  resetValidation = () => {\r\n    this._inputList.forEach((inputElement) => {\r\n      this._hideInputError(inputElement);\r\n    });\r\n    this.toggleButtonState();\r\n  };\r\n}\r\n","export default class Section {\r\n  constructor({ data, renderer }, containerSelector) {\r\n    this._rendererItems = data;\r\n    this._renderer = renderer;\r\n    this._container = document.querySelector(containerSelector);\r\n  }\r\n\r\n  // принимает DOM-элемент и добавляет его в контейнер\r\n  addItem(element) {\r\n    this._container.prepend(element);\r\n    // Можно было бы сделать функцию renderer обычной функцией создания карточки\r\n    // (без вставки ее в DOM), тогда в методе addItem можно было бы сразу создавать\r\n    // карточку и тут же вставлять ее в DOM. Тогда в index.js не нужно было бы отдельно\r\n    // создавать функцию createCard, чтобы в 2х местах создавать карточки.\r\n    // ! addItem(item) {\r\n    // !    const card = this._renderer(item)\r\n    // !    this._container.prepend(card);\r\n    // ! }\r\n    // А можно переиспользовать метод _renderer, чтобы создавать и вставлять карточку\r\n    // ! renderCard(item) {\r\n    // !     this._renderer(item);\r\n    // ! }\r\n    // МОЖНО ЛУЧШЕ\r\n    // Gennadiy Barsegyan\r\n    // ревьюер\r\n  }\r\n\r\n  // метод, который отвечает за отрисовку всех элементов\r\n  renderItems() {\r\n    this._rendererItems.forEach((item) => {\r\n      this._renderer(item);\r\n    });\r\n  }\r\n}\r\n","export default class UserInfo {\r\n  constructor({ userName, userAbout }) {\r\n    this._userName = userName;\r\n    this._userAbout = userAbout;\r\n  }\r\n\r\n  // возвращает объект с данными пользователя\r\n  getUserInfo() {\r\n    return {\r\n      name: this._userName.textContent,\r\n      about: this._userAbout.textContent,\r\n    };\r\n  }\r\n\r\n  // принимает новые данные пользователя и добавляет их на страницу\r\n  setUserInfo({ name, about }) {\r\n    this._userName.textContent = name;\r\n    this._userAbout.textContent = about;\r\n  }\r\n}\r\n","export default class Popup {\r\n  constructor(popupName) {\r\n    this._popup = popupName;\r\n    this._handleEscClose = this._handleEscClose.bind(this);\r\n  }\r\n\r\n  // закрыть попап по нажатию Escape\r\n  _handleEscClose(evt) {\r\n    if (evt.key === 'Escape') {\r\n      this.close();\r\n    }\r\n  }\r\n\r\n  // слушатель событий\r\n  setEventListeners() {\r\n    this._popup.addEventListener('mousedown', (evt) => {\r\n      // модальное окно закрываеться при нажатии на затемнунную область вокруг формы\r\n      // или по нажатию кнопки закрыть \"Х\"\r\n      if (\r\n        evt.target === evt.currentTarget ||\r\n        evt.target.classList.contains('popup__close')\r\n      ) {\r\n        this.close();\r\n      }\r\n    });\r\n  }\r\n\r\n  // открыть попап, добавить слушателя клавиш клавиатуры\r\n  open() {\r\n    document.addEventListener('keydown', this._handleEscClose);\r\n    this._popup.classList.add('popup_opened');\r\n  }\r\n\r\n  // закрыть попап, удалить слушателя клавиш клавиатуры\r\n  close() {\r\n    document.removeEventListener('keydown', this._handleEscClose);\r\n    this._popup.classList.remove('popup_opened');\r\n  }\r\n}\r\n","import Popup from './Popup.js';\r\n\r\nexport default class PopupWithForm extends Popup {\r\n  constructor(popupSelector, popupSubmit) {\r\n    super(popupSelector);\r\n    this._popupForm = this._popup.querySelector('.form');\r\n    this._inputList = Array.from(\r\n      this._popupForm.querySelectorAll('.form__input')\r\n    );\r\n    this._submitButton = this._popup.querySelector('.form__submit');\r\n    this._popupSubmit = popupSubmit;\r\n  }\r\n\r\n  // приватный метот, собирает данные всех полей форм\r\n  _getInputValues() {\r\n    this._formValues = {};\r\n\r\n    this._inputList.forEach(\r\n      (input) => (this._formValues[input.name] = input.value)\r\n    );\r\n    return this._formValues;\r\n  }\r\n\r\n  // Можно сделать метод  setInputValues в классе PopupWithForm, который будет вставлять данные в инпуты:\r\n  // ! setInputValues(data) {\r\n  // !   this._inputList.forEach((input) => {\r\n  // тут вставляем в `value` инпута данные из объекта по атрибуту `name` этого инпута\r\n  // !     input.value = data[input.name];\r\n  // !   });\r\n  // ! }\r\n  // И не нужно будет искать эти инпуты в index.js и что-то вставлять в них при открытии профиля.\r\n  // МОЖНО ЛУЧШЕ\r\n  // Gennadiy Barsegyan\r\n  // ревьюер\r\n\r\n  // перезапись родительского метода setEventListeners\r\n  // добавляет обработчик submit формы\r\n  setEventListeners() {\r\n    super.setEventListeners();\r\n    this._popupForm.addEventListener('submit', (evt) => {\r\n      evt.preventDefault();\r\n      this._popupSubmit(this._getInputValues());\r\n      this.close();\r\n    });\r\n  }\r\n\r\n  close() {\r\n    super.close();\r\n    this._popupForm.reset();\r\n  }\r\n}\r\n","import Popup from './Popup.js';\r\n\r\nexport default class PopupWithImage extends Popup {\r\n  constructor(popupSelector) {\r\n    super(popupSelector);\r\n    this._imagePhoto = document.querySelector('.photo-container__photo');\r\n    this._imageTitle = document.querySelector('.photo-container__photo-title');\r\n    // Эти элементы нужно находить внутри попапа this._popup, который доступен тут от родительского класса.\r\n    // Не нужно этого делать во всем document, так как это может быть дольше по времени.\r\n    // МОЖНО ЛУЧШЕ\r\n    // Gennadiy Barsegyan\r\n    // ревьюер\r\n  }\r\n\r\n  // перезаписывает родительский метод open\r\n  // вставляет в попап карточки изображение,\r\n  // альтернативное название и подпись картинке\r\n  open(data) {\r\n    this._imagePhoto.src = data.link;\r\n    this._imagePhoto.alt = data.name;\r\n    this._imageTitle.textContent = data.name;\r\n\r\n    super.open();\r\n  }\r\n}\r\n","// *формы валидации\r\nconst validationConfig = {\r\n  formSelector: '.form',\r\n  inputSelector: '.form__input',\r\n  inputErrorClass: 'form__input_inactive',\r\n  submitButtonSelector: '.form__submit',\r\n  inactiveButtonClass: 'form__submit_disabled',\r\n  errorClass: 'form__input-error_active',\r\n};\r\n\r\n// *==== Cards ====\r\n// ?масив карточек\r\nconst initialCards = [\r\n  {\r\n    name: 'Архыз',\r\n    link: 'https://pictures.s3.yandex.net/frontend-developer/cards-compressed/arkhyz.jpg',\r\n  },\r\n  {\r\n    name: 'Челябинская область',\r\n    link: 'https://pictures.s3.yandex.net/frontend-developer/cards-compressed/chelyabinsk-oblast.jpg',\r\n  },\r\n  {\r\n    name: 'Иваново',\r\n    link: 'https://pictures.s3.yandex.net/frontend-developer/cards-compressed/ivanovo.jpg',\r\n  },\r\n  {\r\n    name: 'Камчатка',\r\n    link: 'https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kamchatka.jpg',\r\n  },\r\n  {\r\n    name: 'Холмогорский район',\r\n    link: 'https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kholmogorsky-rayon.jpg',\r\n  },\r\n  {\r\n    name: 'Байкал',\r\n    link: 'https://pictures.s3.yandex.net/frontend-developer/cards-compressed/baikal.jpg',\r\n  },\r\n];\r\n\r\n// !DOM элеиенты\r\n// * DOM попапы\r\nconst popupProfile = document.querySelector('.popup_type_profile');\r\nconst popupAddPhoto = document.querySelector('.popup_type_add-photo');\r\n// * находим в DOM кнопку редактирования профиля\r\nconst buttonEditProfile = document.querySelector('.profile__edit-button');\r\n// ? поля в DOM имя и об авторе\r\nconst nameProfile = document.querySelector('.profile__title');\r\nconst jobProfile = document.querySelector('.profile__subtitle');\r\n// * находим в DOM кнопку добавления фотографии\r\nconst buttonAddPhoto = document.querySelector('.profile__add-button');\r\n// * Находим в DOM элементы карточки\r\nconst cardTemplate = '.card-template';\r\nconst popupPhoto = document.querySelector('.popup_type_photo');\r\n// * объявить form || input\r\n// ? форма редактирование профиля\r\nconst formProfile = document.querySelector('.form_edit-profile'); // форма редактирования профиля\r\nconst nameInput = formProfile.querySelector('.form__input_profile-name'); // поле ввода имени\r\nconst jobInput = formProfile.querySelector('.form__input_profile-job'); // поле ввода деятельности\r\n// ? форма добавление карточки\r\nconst formPhoto = document.querySelector('.form_add-photo'); // форма добавления карточки\r\n\r\nexport {\r\n  validationConfig,\r\n  initialCards,\r\n  popupProfile,\r\n  popupAddPhoto,\r\n  buttonEditProfile,\r\n  nameProfile,\r\n  jobProfile,\r\n  buttonAddPhoto,\r\n  cardTemplate,\r\n  popupPhoto,\r\n  formProfile,\r\n  nameInput,\r\n  jobInput,\r\n  formPhoto,\r\n};\r\n","import Card from '../scripts/components/Card.js';\r\nimport FormValidator from '../scripts/components/FormValidator.js';\r\nimport Section from '../scripts/components/Section.js';\r\nimport UserInfo from '../scripts/components/UserInfo.js';\r\nimport PopupWithForm from '../scripts/components/PopupWithForm.js';\r\nimport PopupWithImage from '../scripts/components/PopupWithImage.js';\r\nimport {\r\n  validationConfig,\r\n  initialCards,\r\n  popupProfile,\r\n  popupAddPhoto,\r\n  buttonEditProfile,\r\n  buttonAddPhoto,\r\n  cardTemplate,\r\n  popupPhoto,\r\n  formProfile,\r\n  nameInput,\r\n  jobInput,\r\n  formPhoto,\r\n  nameProfile,\r\n  jobProfile,\r\n} from '../scripts/utils/constants.js';\r\nimport './index.css';\r\n\r\n// * валидация\r\nconst validateFormProfile = new FormValidator(validationConfig, formProfile);\r\nconst validateFormCard = new FormValidator(validationConfig, formPhoto);\r\n// Если будет интересно, можно универсально создать экземпляры валидаторов всех форм, поместив их все в один объект, а потом брать из него валидатор по атрибуту name, который задан для формы. Это очень универсально и для любого кол-ва форм подходит.\r\n// ! const formValidators = {}\r\n\r\n// Включение валидации\r\n// ! const enableValidation = (config) => {\r\n// ! const formList = Array.from(document.querySelectorAll(config.formSelector))\r\n// ! formList.forEach((formElement) => {\r\n// !   const validator = new FormValidator(formElement, config)\r\n//  получаем данные из атрибута `name` у формы\r\n// !  const formName = formElement.getAttribute('name')\r\n//  вот тут в объект записываем под именем формы\r\n// !    formValidators[formName] = validator;\r\n// !   validator.enableValidation();\r\n// !  });\r\n// !};\r\n// ! enableValidation(config);\r\n// И теперь можно использовать валидаторы для деактивации кнопки и тд\r\n// ! formValidators[ profileForm.getAttribute('name') ].resetValidation()\r\n// или можно использовать строку (ведь Вы знаете, какой атрибут `name` у каждой формы)\r\n// ! formValidators['profile-form'].resetValidation()\r\n// МОЖНО ЛУЧШЕ\r\n// Gennadiy Barsegyan\r\n// ревьюер\r\n\r\n// * попап картинки\r\nconst openPhotoPopup = new PopupWithImage(popupPhoto);\r\n\r\n// * создать карточку\r\nconst createCard = (item) => {\r\n  const card = new Card(\r\n    {\r\n      data: item,\r\n      handleCardClick: () => {\r\n        openPhotoPopup.open(item);\r\n      },\r\n    },\r\n    cardTemplate\r\n  );\r\n  const cardElement = card.generateCard();\r\n\r\n  return cardElement;\r\n};\r\n\r\n// * рендер карт\r\nconst renderCard = (item) => {\r\n  const cardElement = createCard(item);\r\n  defaultCards.addItem(cardElement);\r\n};\r\n\r\n// * отрисовка карт\r\nconst defaultCards = new Section(\r\n  {\r\n    data: initialCards,\r\n    renderer: renderCard,\r\n  },\r\n  '.cards'\r\n);\r\n\r\n// * попап добавление фотографии\r\nconst openAddPhotoPopup = new PopupWithForm(popupAddPhoto, (data) => {\r\n  const addCard = {\r\n    name: data.title,\r\n    link: data.src,\r\n  };\r\n  renderCard(addCard);\r\n});\r\n\r\n// * информация о авторе\r\nconst profile = new UserInfo({\r\n  userName: nameProfile,\r\n  userAbout: jobProfile,\r\n});\r\n\r\n// * попап редактирование профиля\r\nconst openPropfilePopup = new PopupWithForm(popupProfile, (data) => {\r\n  profile.setUserInfo({\r\n    name: data.name,\r\n    about: data.job,\r\n  });\r\n});\r\n\r\n// ? события\r\n// ! popup редактировать профиль\r\nbuttonEditProfile.addEventListener('click', () => {\r\n  const getProfile = profile.getUserInfo();\r\n\r\n  nameInput.value = getProfile.name;\r\n  jobInput.value = getProfile.about;\r\n\r\n  validateFormProfile.resetValidation();\r\n  openPropfilePopup.open();\r\n});\r\n// ! popup добавить фотографию\r\nbuttonAddPhoto.addEventListener('click', () => {\r\n  validateFormCard.resetValidation();\r\n  openAddPhotoPopup.open();\r\n});\r\n\r\n// * включить валидация\r\nvalidateFormCard.enableValidation();\r\nvalidateFormProfile.enableValidation();\r\n// * отрисовать карты\r\ndefaultCards.renderItems();\r\n// * открыть попап\r\nopenAddPhotoPopup.setEventListeners();\r\nopenPhotoPopup.setEventListeners();\r\nopenPropfilePopup.setEventListeners();\r\n\r\nfetch('https://mesto.nomoreparties.co/v1/cohort-44/cards', {\r\n  headers: {\r\n    authorization: '78b845d7-f9bb-43fd-9d7f-fb92a3c4ec96',\r\n  },\r\n})\r\n  .then((res) => res.json())\r\n  .then((result) => {\r\n    console.log(result);\r\n  });\r\n"],"names":["Card","cardSelector","data","handleCardClick","_element","remove","_buttonLike","classList","toggle","this","_title","name","_image","link","_handleCardClick","_cardSelector","document","querySelector","content","cloneNode","_getTemplate","_cardImage","_cardTitle","_buttonDelete","src","alt","textContent","_setEventListeners","addEventListener","_handleDeleteCard","_handleLikeCard","FormValidator","obj","formElement","inputElement","errorElement","_formElement","id","add","_inputErrorClass","_errorClass","validationMessage","_inputList","some","validity","valid","_hideInputError","_showInputError","toggleButtonState","evt","preventDefault","forEach","_checkInputValidity","_hasInvalidInput","_buttonElement","disabled","_inactiveButtonClass","_formSelector","formSelector","_inputSelector","inputSelector","inputErrorClass","_submitButtonSelector","submitButtonSelector","inactiveButtonClass","errorClass","Array","from","querySelectorAll","Section","containerSelector","renderer","_rendererItems","_renderer","_container","element","prepend","item","UserInfo","userName","userAbout","_userName","_userAbout","about","Popup","popupName","_popup","_handleEscClose","bind","key","close","target","currentTarget","contains","removeEventListener","PopupWithForm","popupSelector","popupSubmit","_popupForm","_submitButton","_popupSubmit","_formValues","input","value","_getInputValues","reset","PopupWithImage","_imagePhoto","_imageTitle","validationConfig","popupProfile","popupAddPhoto","buttonEditProfile","nameProfile","jobProfile","buttonAddPhoto","popupPhoto","formProfile","nameInput","jobInput","formPhoto","validateFormProfile","validateFormCard","openPhotoPopup","renderCard","cardElement","open","generateCard","createCard","defaultCards","addItem","openAddPhotoPopup","addCard","title","profile","openPropfilePopup","setUserInfo","job","getProfile","getUserInfo","resetValidation","enableValidation","renderItems","setEventListeners","fetch","headers","authorization","then","res","json","result","console","log"],"sourceRoot":""}